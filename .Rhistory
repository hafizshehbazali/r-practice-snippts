.libPaths()
.Library
.Library.site
.Library.site()
?.lib
?getOption
getOption("Default")
getOption("DefaultPackages")
getOption("defaultPackages")
getOption("width")
getOption("add.smoth")
getOption("add.smooth")
getOption("defaultPackages")
getOption(defaultDumpName())
getOption(defaultDumpName
getOption(defaultDumpName
getOption(defaultDumpName)
getOption("error")
R_system_version()
version
library(Image)
library(Imager)
library(imager)
.libPaths()
?.libPaths()
.Library.site
.Library
.libPaths("/home/shehbaz/R/x86_64-pc-linux-gnu-library/3.0")
.libPaths()
?package
install.packages("imager")
library(imager)
devtools::install_github("dahtah/imager")
install.packages("install_github")
install.packages("install_github")
?devtool
install.packages("devtool")
install.packages("devtool")
tree1=read.csv(file = "~/Desktop/Prog/R/trees91.csv", header = TRUE, sep = ",");
hist(tree1$C, main="Histogram tree", xlab="C")
w1=read.csv(file="~/Desktop/Prog/R/w1.dat", header = TRUE, sep=",");
hist(w1$vals,main='Leaf BioMass in High CO2 Environment',xlab='BioMass of Leaves',ylim=c(0,16))
intall.package("devtools")
install.packages("devtools")
.libPaths()
version()
version()
version
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0/")
.libPaths()
install.packages("devtools")
library("devtools")
?"devtools"
?install_github()
install_github("vqv/ggbiplot")
?ggbiplot
library(ggbiplot)
data(wine)
wine.pca <- prcomp(wine, scale. = TRUE)
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1,
groups = wine.class, ellipse = TRUE, circle = TRUE) +
scale_color_discrete(name = '') +
theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1, groups = wine.class, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
ggbiplot(wine.pca, obs.scale = 1, var.scale = 1, groups = wine.class, ellipse = TRUE, circle = TRUE) + scale_color_discrete(name = '') + theme(legend.direction = 'horizontal', legend.position = 'top')
..libPa.libPaths())
.libPaths()
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0")
source('~/Documents/programming/R/practice/pr_nn.R')
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0")
install.packages('neuralnet')
library("neuralnet")
#Going to create a neural network to perform sqare rooting
#Type ?neuralnet for more information on the neuralnet library
#Generate 50 random numbers uniformly distributed between 0 and 100
#And store them as a dataframe
traininginput <-  as.data.frame(runif(50, min=0, max=100))
trainingoutput <- sqrt(traininginput)
#Column bind the data into one variable
trainingdata <- cbind(traininginput,trainingoutput)
colnames(trainingdata) <- c("Input","Output")
#Train the neural network
#Going to have 10 hidden layers
#Threshold is a numeric value specifying the threshold for the partial
#derivatives of the error function as stopping criteria.
net.sqrt <- neuralnet(Output~Input,trainingdata, hidden=10, threshold=0.01)
print(net.sqrt)
#Plot the neural network
plot(net.sqrt)
#Test the neural network on some training data
testdata <- as.data.frame((1:10)^2) #Generate some squared numbers
net.results <- compute(net.sqrt, testdata) #Run them through the neural network
#Lets see what properties net.sqrt has
ls(net.results)
#Lets see the results
print(net.results$net.result)
#Lets display a better version of the results
cleanoutput <- cbind(testdata,sqrt(testdata),
as.data.frame(net.results$net.result))
colnames(cleanoutput) <- c("Input","Expected Output","Neural Net Output")
print(cleanoutput)
install.packages("RCurl")
install.packages("rmarkdown")
a
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0/")
.Library.site
.Library.site()
.Library.site
.Library
R_system_version()
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0/")
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0/")
a=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
ar=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
ag=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
ab=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
dim(ar)
?dim
x<- 1:12
x
dim(x) <- c(3,4)
dim(x)
x
?col2rgb
rgb(0,1,0)
rgb((0:15)/15, green = 0, blue = 0, names = paste("red", 0:15, sep = "."))
a=(0:15)/15
a
print(a)
print(b)
b
b=rgb(a, green = 0, blue = 0, names = paste("red", 0:15, sep = "."))
typeof(b)
b
dim(b)
?rgb
rgb(0,0:12,0,max=255)
av=rgb(0,0:12,0,max=255)
av
typeof(av)
dim(av)
length(av)
?dim
B= matrix(c(2, 4, 3, 1, 5, 7), nrow = 3,)
print(B)
B= matrix(c(2, 4, 3, 1, 5, 7), nrow = 3, dimnames = c("row","col"))
print(B)
B= matrix(c(2, 4, 3, 1, 5, 7), nrow = 3, dimnames = c("row1","row1","row1","col1","col1","col1",))
B= matrix(c(2, 4, 3, 1, 5, 7), nrow = 3, dimnames = c("row1","row1","row1","col1","col1","col1"))
x=10.5
class(x)
?class
data.class(x)
isClass(x)
isClass(Class = "numeric",formal = x, where = x)
inherits(what = a)
oldClass(x)
inherits(what = a)
inherits(x,what = a)
inherits(x,what = "a")
class(x) <- c("a", "b")
k=1
class(k)
is.integer(k)
is.numeric(k)
class(k) <- integer()
class(k) <- integer(12)
is.integer(k)
k
class(k) <- integer(1)
k=1
is.integer(k)
class(k)
y=as.integer(3)
y
class(y)
ny=as.numeric(34)
class(ny)
ny=as.numeric(c(34,3,4,2,3)
ny=as.numeric(c(34,3,4,2,3))
?as.numeric
factor(4:21)
factor(1:3)
f=factor(1:5)
f
typeof(f)
class(f)
methods(f)
is.factor(f)
as.numeric(c("-.1"," 2.7 ","B"))
aas.numeric(c("-.1"," 2.7 ","B"))
asb=as.numeric(c("-.1"," 2.7 ","B"))
asb
a=as.numeric("1","2","3")
ny=as.numeric(c(34,3,4,2,3))
a
ny=as.numeric(c(34,3,4,2,3))
ny
class(ny)
as.numeric(c(12,B))
B
B(:)
B[,]
B[]
B[:]
B[]
B[;]
B{:}
c(B)
c=c(12,3,4,,2)
asc=c(12,3,4,,2)
c=c(12,3,4,2)
c
class(c)
typeof(c)
c=as.numeric(c(1,2,3))
c
class(c)
typeof(c)
i=as.integer(c(12,3,1,2))
i
class(i)
typeof(i)
d=as.double(c(23,1,2,3))
class(d)
type.convert(d)
typeof(d)
a=as.integer(TRUE)
a
a=as.integer(FALSE)
A
a
as.integer('A')
a=as.integer(FALSE)
class(a)
typeof(a)
?typeof
z=1+2i
class(z)
`class<-`(z)
`class<-(z)
class<-(z)
class(z)<-(2)
class(z) <- "integer"
class(z);
;class(z) <- "integer"
class(z) <- "integer";
;
asdl
asdlkf
a
sdf
__
))
:
asdlk
((
))
asdf
>>>
<<
''
as
e
e
# http://www.rdatamining.com/
ar=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
ag=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
ar=matrix(c(1,2,3,4,5,6,7,8,9),nrow = 3)
c
;;;;;;;;
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0/")
packrat::set_opts(local.repos = c("~/R/x86_64-pc-linux-gnu-library/3.0"))
a=as.logical(TRUE)
a
.libPaths()
.libPaths("~/R/x86_64-pc-linux-gnu-library/3.0/")
a
b= as.logical(FALSE)
b
class(b)
typeof(b)
unclass(b)
b
as.integer(b)
as.integer(a)
fname=as.character("Joe")
fname
class(fname)
typeof(fname)
packrat::set_opts(local.repos = "")
packrat::get_opts()
lname=as.character("Smith")
paste(fname, lname, sep = ":", collapse = TRUE)
paste(fname, lname, sep = ":", collapse = TRUE)
paste(fname, lname, sep = ":", collapse = FALSE)
paste(fname, lname, sep = ":")
fullname=paste(fname, lname, sep = ":")
print(fullname)
fullname=paste(fname, lname,fname sep = ":")
fullname=paste(fname, lname,fname, sep = ":")
print(fullname)
b=c(6,7,5)
a=c(1,2,4);
paste(a,b)
class(b)
b=c(6,7,5)
typeof(b)
class(b)
c=paste(a,b)
class(c)
sprintf("%s has %d dollars", "Sam", 100)
sprintf("%s had %0.2f ammount", "Doone", 199.199)
substr("New Start string from here. Stop here. ", start = "Start", stop = "Stop")
substr("New Start string from here. Stop here. ", start = "Start", stop = 20)
substr("New Start string from here. Stop here. ", start = 4, stop = 20)
?substr
substring(x, 2) <- c("..", "+++")
substr(x, 2) <- c("..", "+++")
substring(x, 2, 4:6)
substring(x, 2) <- c("..", "+++")
sub("little", "big"," Lamb has little leg")
help("sub")
?c
c(1,7:9)
c(1:5, 10.5, "next")
typeof(c(1:5, 10.5, "next"))
class(c(1:5, 10.5, "next"))
x <- 1:4
class(x)
typeof(x)
names(x) < letters[1:4]
x
class(x)
typeof(xx)
typeof(x)
?letters
LLETTERS
LLETTERS
LETTERS
letters
month.abb
month.name
monthplot()
monthplot(month.abb)
pi
EBImage::readImage("rice.jpg")
EBImage::readImage("rice.png")
EBImage::readImage("rice.jpeg")
EBImage::readImage("images/narnia_forest.jpg")
img=EBImage::readImage("images/narnia_forest.jpg")
display(img)
library("EBImage")
library("EBImage")
img=EBImage::readImage("images/narnia_forest.jpg")
display(img)
class(img)
typeof(img)
dim(img)
display(img[,,1])
display(img[,,2])
display(img[,,3])
img=EBImage::readImage("images/white.png")
display(img)
display(img[,,1])
display(img[,1,1])
display(img[,1,2])
display(img[,,2])
img_c=img[1:5, 1:5,,]
img_c=img[1:5, 1:5,]
dim(img_c)
img_c
imageData(img_c,2)
imageData(img_c)
is.Image(img_c)
is.Image(img)
as.Image(img_c)
getNumberOfFrames(img_c, type = 'total')
a=c(1,2,3,4,5,6,7,8,9)
b= 1+ a
b
d=a+b
a=matrix(a, nrow = 3)
a
b=matrix(b,nrow = 3)
d=Matrix::.__C__number
d
d=a+1
d
d=a+1
d
b
d=b+1
d
paste(a,b,c)
paste(a,b,d)
c
class(a)
class(b)
typeof(a)
colorMode(a)
colorMode(img)
colorMode(img_c)
imageData(img_c)
getFrame(img_c,1)
getFrame(img_c,2)
x = readImage(system.file("images", "shapes.png", package="EBImage"))
EBImage::display(x)
if (interactive()) display(x)
dx = distmap(x)
dim(dx)
dim9x
dim(x)
class(x)
typeof(x)
imageData(x)
x-dx
x[3:6, 12:48]
if (interactive()) display(dx/10, title='Distance map of x')
img=EBImage::readImage(files = "images/white.png")
EBImage::display(img)
rimg=EBImage::getFrame(img,1)
EBImage::display(rimg)
gimg=EBImage::getFrame(img,2)
EBImage::display(gimg)
bimg=EBImage::getFrame(img,3)
img=EBImage::readImage(files = "images/k1.jpg")
EBImage::display(img)
rimg=EBImage::getFrame(img,1)
EBImage::display(rimg)
gimg=EBImage::getFrame(img,2)
EBImage::display(gimg)
bimg=EBImage::getFrame(img,3)
EBImage::display(bimg)
s1 = exp(12i*pi*seq(-1, 1, length=300)^2)
dim(s11)
dim(s1)
length(s1)
y = Image(outer(Im(s1), Re(s1)))
if (interactive()) display(normalize(y))
?lm
?Im
x = Image(rnorm(300*300*3),dim=c(300,300,3), colormode='Color')
if (interactive()) display(x)
w = matrix(seq(0, 1, len=300), nc=300, nr=300)
m = abind::abind(w, t(w), along=3)
?abind
a
b
d
im=abind::abind(a,b,d, along=3)
im
class(im)
as.Image(im)
z=Image(im, colormode = 'Color')
z
ddisplay(z)
display(z)
display(im)
install.packages("magic")
magic::magic(3)
magic::magic(5)
magic::magic.8(8)
magic(20)
magic(20)
magic::magic(20)
randu
?randu
?runif
runif(5, min=0, max=4)
a=matrix(runif(200), nrow = 100)
a
length(a)
dim(a)
a=matrix(runif(10000, min=0, max=255), nrow = 100)
a=matrix(floor(runif(10000, min=0, max=255)), nrow = 100)
a
a=matrix(floor(runif(10000, min=0, max=255)), nrow = 100) # 100 x 100
b=matrix(floor(runif(10000, min=0, max=255)), nrow = 100) - 5 # 100 x 100
a=matrix(floor(runif(10000, min=0, max=255)), nrow = 100) # 100 x 100
b=matrix(floor(runif(10000, min=0, max=255)), nrow = 100) - 5 # 100 x 100
c=matrix(floor(runif(10000, min=0, max=255)), nrow = 100) - 20 # 100 x 100
im=abind::abind(a,b,c, along=3)
class(im)
typeof(im)
class(c)
im=abind::abind(a,b,c, along=3)
class(im)
typeof(im)
EBImage::as.Image(im) # this will convert the
class(im)
class(im)
EBImage::Image(im, colormode = "Color") # this will convert the
class(im)
class(nim)
nim=EBImage::Image(im, colormode = "Color") # this will convert the
class(nim)
EBImage::imageData(nim)
dim(nim)
EBImage::display(nim)
EBImage::display(getFrame(nim,1))
EBImage::display(getFrame(nim,1))
EBImage::display(getFrame(nim,2))
EBImage::display(getFrame(nim,3))
state.abb
state.region
state.area
state.center
state.division
state.x77
state.center
